//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Core.Environments.Client.Http;



namespace Unity.Services.Core.Environments.Client.Models
{
    /// <summary>
    /// InlineObject5 model
    /// </summary>
    [Preserve]
    [DataContract(Name = "inline_object_5")]
    internal class InlineObject5
    {
        /// <summary>
        /// Creates an instance of InlineObject5.
        /// </summary>
        /// <param name="firstName">First name of the address contact</param>
        /// <param name="lastName">Last name of the address contact</param>
        /// <param name="email">Email of the address contact</param>
        /// <param name="street">Street address</param>
        /// <param name="locality">City or town name of the address</param>
        /// <param name="postalCode">Post code of the address</param>
        /// <param name="country">Country code of the address in ISO-3166 Alpha-2 format</param>
        /// <param name="phoneNumer">Phone number of the address contact (country code plus area code and phone number)</param>
        /// <param name="region">State or province (if applicable)</param>
        [Preserve]
        public InlineObject5(string firstName, string lastName, string email, string street, string locality, string postalCode, string country, string phoneNumer = default, string region = default)
        {
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            PhoneNumer = phoneNumer;
            Street = street;
            Locality = locality;
            PostalCode = postalCode;
            Country = country;
            Region = region;
        }

        /// <summary>
        /// First name of the address contact
        /// </summary>
        [Preserve]
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName{ get; }
        
        /// <summary>
        /// Last name of the address contact
        /// </summary>
        [Preserve]
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = true)]
        public string LastName{ get; }
        
        /// <summary>
        /// Email of the address contact
        /// </summary>
        [Preserve]
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email{ get; }
        
        /// <summary>
        /// Phone number of the address contact (country code plus area code and phone number)
        /// </summary>
        [Preserve]
        [DataMember(Name = "phoneNumer", EmitDefaultValue = false)]
        public string PhoneNumer{ get; }
        
        /// <summary>
        /// Street address
        /// </summary>
        [Preserve]
        [DataMember(Name = "street", IsRequired = true, EmitDefaultValue = true)]
        public string Street{ get; }
        
        /// <summary>
        /// City or town name of the address
        /// </summary>
        [Preserve]
        [DataMember(Name = "locality", IsRequired = true, EmitDefaultValue = true)]
        public string Locality{ get; }
        
        /// <summary>
        /// Post code of the address
        /// </summary>
        [Preserve]
        [DataMember(Name = "postalCode", IsRequired = true, EmitDefaultValue = true)]
        public string PostalCode{ get; }
        
        /// <summary>
        /// Country code of the address in ISO-3166 Alpha-2 format
        /// </summary>
        [Preserve]
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country{ get; }
        
        /// <summary>
        /// State or province (if applicable)
        /// </summary>
        [Preserve]
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region{ get; }
    
        /// <summary>
        /// Formats a InlineObject5 into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (FirstName != null)
            {
                serializedModel += "firstName," + FirstName + ",";
            }
            if (LastName != null)
            {
                serializedModel += "lastName," + LastName + ",";
            }
            if (Email != null)
            {
                serializedModel += "email," + Email + ",";
            }
            if (PhoneNumer != null)
            {
                serializedModel += "phoneNumer," + PhoneNumer + ",";
            }
            if (Street != null)
            {
                serializedModel += "street," + Street + ",";
            }
            if (Locality != null)
            {
                serializedModel += "locality," + Locality + ",";
            }
            if (PostalCode != null)
            {
                serializedModel += "postalCode," + PostalCode + ",";
            }
            if (Country != null)
            {
                serializedModel += "country," + Country + ",";
            }
            if (Region != null)
            {
                serializedModel += "region," + Region;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a InlineObject5 as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (FirstName != null)
            {
                var firstNameStringValue = FirstName.ToString();
                dictionary.Add("firstName", firstNameStringValue);
            }
            
            if (LastName != null)
            {
                var lastNameStringValue = LastName.ToString();
                dictionary.Add("lastName", lastNameStringValue);
            }
            
            if (Email != null)
            {
                var emailStringValue = Email.ToString();
                dictionary.Add("email", emailStringValue);
            }
            
            if (PhoneNumer != null)
            {
                var phoneNumerStringValue = PhoneNumer.ToString();
                dictionary.Add("phoneNumer", phoneNumerStringValue);
            }
            
            if (Street != null)
            {
                var streetStringValue = Street.ToString();
                dictionary.Add("street", streetStringValue);
            }
            
            if (Locality != null)
            {
                var localityStringValue = Locality.ToString();
                dictionary.Add("locality", localityStringValue);
            }
            
            if (PostalCode != null)
            {
                var postalCodeStringValue = PostalCode.ToString();
                dictionary.Add("postalCode", postalCodeStringValue);
            }
            
            if (Country != null)
            {
                var countryStringValue = Country.ToString();
                dictionary.Add("country", countryStringValue);
            }
            
            if (Region != null)
            {
                var regionStringValue = Region.ToString();
                dictionary.Add("region", regionStringValue);
            }
            
            return dictionary;
        }
    }
}
