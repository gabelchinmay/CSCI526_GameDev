//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Core.Environments.Client.Http;



namespace Unity.Services.Core.Environments.Client.Models
{
    /// <summary>
    /// UnityOrganizationMemberV1 model
    /// </summary>
    [Preserve]
    [DataContract(Name = "unity.OrganizationMember.v1")]
    internal class UnityOrganizationMemberV1
    {
        /// <summary>
        /// Creates an instance of UnityOrganizationMemberV1.
        /// </summary>
        /// <param name="groupGenesisId">ID provided by Genesis for the group that links the user to the organization</param>
        /// <param name="groupName">Name for the group that links the user to the organization</param>
        /// <param name="role">The role for the user within the organization</param>
        /// <param name="userEmail">The email of the user</param>
        /// <param name="userGenesisId">ID of the user as provided by Genesis</param>
        /// <param name="userId">ID of the user</param>
        /// <param name="userName">Name of the user</param>
        [Preserve]
        public UnityOrganizationMemberV1(string groupGenesisId = default, string groupName = default, string role = default, string userEmail = default, string userGenesisId = default, System.Guid userId = default, string userName = default)
        {
            GroupGenesisId = groupGenesisId;
            GroupName = groupName;
            Role = role;
            UserEmail = userEmail;
            UserGenesisId = userGenesisId;
            UserId = userId;
            UserName = userName;
        }

        /// <summary>
        /// ID provided by Genesis for the group that links the user to the organization
        /// </summary>
        [Preserve]
        [DataMember(Name = "groupGenesisId", EmitDefaultValue = false)]
        public string GroupGenesisId{ get; }
        
        /// <summary>
        /// Name for the group that links the user to the organization
        /// </summary>
        [Preserve]
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName{ get; }
        
        /// <summary>
        /// The role for the user within the organization
        /// </summary>
        [Preserve]
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public string Role{ get; }
        
        /// <summary>
        /// The email of the user
        /// </summary>
        [Preserve]
        [DataMember(Name = "userEmail", EmitDefaultValue = false)]
        public string UserEmail{ get; }
        
        /// <summary>
        /// ID of the user as provided by Genesis
        /// </summary>
        [Preserve]
        [DataMember(Name = "userGenesisId", EmitDefaultValue = false)]
        public string UserGenesisId{ get; }
        
        /// <summary>
        /// ID of the user
        /// </summary>
        [Preserve]
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public System.Guid UserId{ get; }
        
        /// <summary>
        /// Name of the user
        /// </summary>
        [Preserve]
        [DataMember(Name = "userName", EmitDefaultValue = false)]
        public string UserName{ get; }
    
        /// <summary>
        /// Formats a UnityOrganizationMemberV1 into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (GroupGenesisId != null)
            {
                serializedModel += "groupGenesisId," + GroupGenesisId + ",";
            }
            if (GroupName != null)
            {
                serializedModel += "groupName," + GroupName + ",";
            }
            if (Role != null)
            {
                serializedModel += "role," + Role + ",";
            }
            if (UserEmail != null)
            {
                serializedModel += "userEmail," + UserEmail + ",";
            }
            if (UserGenesisId != null)
            {
                serializedModel += "userGenesisId," + UserGenesisId + ",";
            }
            if (UserId != null)
            {
                serializedModel += "userId," + UserId + ",";
            }
            if (UserName != null)
            {
                serializedModel += "userName," + UserName;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a UnityOrganizationMemberV1 as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (GroupGenesisId != null)
            {
                var groupGenesisIdStringValue = GroupGenesisId.ToString();
                dictionary.Add("groupGenesisId", groupGenesisIdStringValue);
            }
            
            if (GroupName != null)
            {
                var groupNameStringValue = GroupName.ToString();
                dictionary.Add("groupName", groupNameStringValue);
            }
            
            if (Role != null)
            {
                var roleStringValue = Role.ToString();
                dictionary.Add("role", roleStringValue);
            }
            
            if (UserEmail != null)
            {
                var userEmailStringValue = UserEmail.ToString();
                dictionary.Add("userEmail", userEmailStringValue);
            }
            
            if (UserGenesisId != null)
            {
                var userGenesisIdStringValue = UserGenesisId.ToString();
                dictionary.Add("userGenesisId", userGenesisIdStringValue);
            }
            
            if (UserId != null)
            {
                var userIdStringValue = UserId.ToString();
                dictionary.Add("userId", userIdStringValue);
            }
            
            if (UserName != null)
            {
                var userNameStringValue = UserName.ToString();
                dictionary.Add("userName", userNameStringValue);
            }
            
            return dictionary;
        }
    }
}
