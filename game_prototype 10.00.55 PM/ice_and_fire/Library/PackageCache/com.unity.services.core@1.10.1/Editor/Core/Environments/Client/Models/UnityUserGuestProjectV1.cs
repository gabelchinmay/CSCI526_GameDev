//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Core.Environments.Client.Http;



namespace Unity.Services.Core.Environments.Client.Models
{
    /// <summary>
    /// UnityUserGuestProjectV1 model
    /// </summary>
    [Preserve]
    [DataContract(Name = "unity.UserGuestProject.v1")]
    internal class UnityUserGuestProjectV1
    {
        /// <summary>
        /// Creates an instance of UnityUserGuestProjectV1.
        /// </summary>
        /// <param name="id">ID of the project</param>
        /// <param name="genesisId">ID provided by Genesis, for a small number of projects this ID will not be a UUID for legacy reasons, so treat it as a string ID</param>
        /// <param name="name">Name of the project</param>
        /// <param name="iconUrl">URL for the icon of the project (either a custom icon or a mobile store icon)</param>
        /// <param name="defaultEnvironmentId">Default environment ID of the project</param>
        /// <param name="organizationId">ID of the organization where the project belongs to</param>
        /// <param name="organizationGenesisId">Organization ID provided by Genesis where the project belongs to</param>
        /// <param name="organizationName">Name of the Organization</param>
        [Preserve]
        public UnityUserGuestProjectV1(System.Guid id = default, string genesisId = default, string name = default, string iconUrl = default, System.Guid defaultEnvironmentId = default, System.Guid organizationId = default, string organizationGenesisId = default, string organizationName = default)
        {
            Id = id;
            GenesisId = genesisId;
            Name = name;
            IconUrl = iconUrl;
            DefaultEnvironmentId = defaultEnvironmentId;
            OrganizationId = organizationId;
            OrganizationGenesisId = organizationGenesisId;
            OrganizationName = organizationName;
        }

        /// <summary>
        /// ID of the project
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public System.Guid Id{ get; }
        
        /// <summary>
        /// ID provided by Genesis, for a small number of projects this ID will not be a UUID for legacy reasons, so treat it as a string ID
        /// </summary>
        [Preserve]
        [DataMember(Name = "genesisId", EmitDefaultValue = false)]
        public string GenesisId{ get; }
        
        /// <summary>
        /// Name of the project
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name{ get; }
        
        /// <summary>
        /// URL for the icon of the project (either a custom icon or a mobile store icon)
        /// </summary>
        [Preserve]
        [DataMember(Name = "iconUrl", EmitDefaultValue = false)]
        public string IconUrl{ get; }
        
        /// <summary>
        /// Default environment ID of the project
        /// </summary>
        [Preserve]
        [DataMember(Name = "defaultEnvironmentId", EmitDefaultValue = false)]
        public System.Guid DefaultEnvironmentId{ get; }
        
        /// <summary>
        /// ID of the organization where the project belongs to
        /// </summary>
        [Preserve]
        [DataMember(Name = "organizationId", EmitDefaultValue = false)]
        public System.Guid OrganizationId{ get; }
        
        /// <summary>
        /// Organization ID provided by Genesis where the project belongs to
        /// </summary>
        [Preserve]
        [DataMember(Name = "organizationGenesisId", EmitDefaultValue = false)]
        public string OrganizationGenesisId{ get; }
        
        /// <summary>
        /// Name of the Organization
        /// </summary>
        [Preserve]
        [DataMember(Name = "organizationName", EmitDefaultValue = false)]
        public string OrganizationName{ get; }
    
        /// <summary>
        /// Formats a UnityUserGuestProjectV1 into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (GenesisId != null)
            {
                serializedModel += "genesisId," + GenesisId + ",";
            }
            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            if (IconUrl != null)
            {
                serializedModel += "iconUrl," + IconUrl + ",";
            }
            if (DefaultEnvironmentId != null)
            {
                serializedModel += "defaultEnvironmentId," + DefaultEnvironmentId + ",";
            }
            if (OrganizationId != null)
            {
                serializedModel += "organizationId," + OrganizationId + ",";
            }
            if (OrganizationGenesisId != null)
            {
                serializedModel += "organizationGenesisId," + OrganizationGenesisId + ",";
            }
            if (OrganizationName != null)
            {
                serializedModel += "organizationName," + OrganizationName;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a UnityUserGuestProjectV1 as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }
            
            if (GenesisId != null)
            {
                var genesisIdStringValue = GenesisId.ToString();
                dictionary.Add("genesisId", genesisIdStringValue);
            }
            
            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            if (IconUrl != null)
            {
                var iconUrlStringValue = IconUrl.ToString();
                dictionary.Add("iconUrl", iconUrlStringValue);
            }
            
            if (DefaultEnvironmentId != null)
            {
                var defaultEnvironmentIdStringValue = DefaultEnvironmentId.ToString();
                dictionary.Add("defaultEnvironmentId", defaultEnvironmentIdStringValue);
            }
            
            if (OrganizationId != null)
            {
                var organizationIdStringValue = OrganizationId.ToString();
                dictionary.Add("organizationId", organizationIdStringValue);
            }
            
            if (OrganizationGenesisId != null)
            {
                var organizationGenesisIdStringValue = OrganizationGenesisId.ToString();
                dictionary.Add("organizationGenesisId", organizationGenesisIdStringValue);
            }
            
            if (OrganizationName != null)
            {
                var organizationNameStringValue = OrganizationName.ToString();
                dictionary.Add("organizationName", organizationNameStringValue);
            }
            
            return dictionary;
        }
    }
}
