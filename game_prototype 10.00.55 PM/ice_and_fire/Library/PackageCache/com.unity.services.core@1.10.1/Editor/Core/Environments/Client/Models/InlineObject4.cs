//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Core.Environments.Client.Http;



namespace Unity.Services.Core.Environments.Client.Models
{
    /// <summary>
    /// InlineObject4 model
    /// </summary>
    [Preserve]
    [DataContract(Name = "inline_object_4")]
    internal class InlineObject4
    {
        /// <summary>
        /// Creates an instance of InlineObject4.
        /// </summary>
        /// <param name="name">Name of the organization</param>
        /// <param name="industryType">Industry type of the organization.  Deprecated types preserved for backwards compatibility: - Games - Media &amp; Entertainment - Architecture/Engineering/Construction - Auto/Transportation/Manufacturing - Platform Partner </param>
        [Preserve]
        public InlineObject4(string name = default, IndustryTypeOptions industryType = default)
        {
            Name = name;
            IndustryType = industryType;
        }

        /// <summary>
        /// Name of the organization
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name{ get; }
        
        /// <summary>
        /// Industry type of the organization.  Deprecated types preserved for backwards compatibility: - Games - Media &amp; Entertainment - Architecture/Engineering/Construction - Auto/Transportation/Manufacturing - Platform Partner 
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "industryType", EmitDefaultValue = false)]
        public IndustryTypeOptions IndustryType{ get; }
    
        /// <summary>
        /// Industry type of the organization.  Deprecated types preserved for backwards compatibility: - Games - Media &amp; Entertainment - Architecture/Engineering/Construction - Auto/Transportation/Manufacturing - Platform Partner 
        /// </summary>
        /// <value>Industry type of the organization.  Deprecated types preserved for backwards compatibility: - Games - Media &amp; Entertainment - Architecture/Engineering/Construction - Auto/Transportation/Manufacturing - Platform Partner </value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IndustryTypeOptions
        {
            /// <summary>
            /// Enum Architecture for value: Architecture
            /// </summary>
            [EnumMember(Value = "Architecture")]
            Architecture = 1,
            /// <summary>
            /// Enum Aerospace for value: Aerospace
            /// </summary>
            [EnumMember(Value = "Aerospace")]
            Aerospace = 2,
            /// <summary>
            /// Enum Automotive for value: Automotive
            /// </summary>
            [EnumMember(Value = "Automotive")]
            Automotive = 3,
            /// <summary>
            /// Enum Construction for value: Construction
            /// </summary>
            [EnumMember(Value = "Construction")]
            Construction = 4,
            /// <summary>
            /// Enum ConsumerElectronics for value: Consumer electronics
            /// </summary>
            [EnumMember(Value = "Consumer electronics")]
            ConsumerElectronics = 5,
            /// <summary>
            /// Enum ConsumerPackagedGoods for value: Consumer packaged goods
            /// </summary>
            [EnumMember(Value = "Consumer packaged goods")]
            ConsumerPackagedGoods = 6,
            /// <summary>
            /// Enum DrugsPharmaceuticals for value: Drugs & pharmaceuticals
            /// </summary>
            [EnumMember(Value = "Drugs & pharmaceuticals")]
            DrugsPharmaceuticals = 7,
            /// <summary>
            /// Enum Education for value: Education
            /// </summary>
            [EnumMember(Value = "Education")]
            Education = 8,
            /// <summary>
            /// Enum Engineering for value: Engineering
            /// </summary>
            [EnumMember(Value = "Engineering")]
            Engineering = 9,
            /// <summary>
            /// Enum Entertainment for value: Entertainment
            /// </summary>
            [EnumMember(Value = "Entertainment")]
            Entertainment = 10,
            /// <summary>
            /// Enum Gambling for value: Gambling
            /// </summary>
            [EnumMember(Value = "Gambling")]
            Gambling = 11,
            /// <summary>
            /// Enum Gaming for value: Gaming
            /// </summary>
            [EnumMember(Value = "Gaming")]
            Gaming = 12,
            /// <summary>
            /// Enum Government for value: Government
            /// </summary>
            [EnumMember(Value = "Government")]
            Government = 13,
            /// <summary>
            /// Enum IndustrialMachinery for value: Industrial machinery
            /// </summary>
            [EnumMember(Value = "Industrial machinery")]
            IndustrialMachinery = 14,
            /// <summary>
            /// Enum Manufacturing for value: Manufacturing
            /// </summary>
            [EnumMember(Value = "Manufacturing")]
            Manufacturing = 15,
            /// <summary>
            /// Enum OilGas for value: Oil & gas
            /// </summary>
            [EnumMember(Value = "Oil & gas")]
            OilGas = 16,
            /// <summary>
            /// Enum Retail for value: Retail
            /// </summary>
            [EnumMember(Value = "Retail")]
            Retail = 17,
            /// <summary>
            /// Enum Student for value: Student
            /// </summary>
            [EnumMember(Value = "Student")]
            Student = 18,
            /// <summary>
            /// Enum Telecom for value: Telecom
            /// </summary>
            [EnumMember(Value = "Telecom")]
            Telecom = 19,
            /// <summary>
            /// Enum Transportation for value: Transportation
            /// </summary>
            [EnumMember(Value = "Transportation")]
            Transportation = 20,
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 21,
            /// <summary>
            /// Enum Games for value: Games
            /// </summary>
            [EnumMember(Value = "Games")]
            Games = 22,
            /// <summary>
            /// Enum MediaEntertainment for value: Media & Entertainment
            /// </summary>
            [EnumMember(Value = "Media & Entertainment")]
            MediaEntertainment = 23,
            /// <summary>
            /// Enum ArchitectureEngineeringConstruction for value: Architecture/Engineering/Construction
            /// </summary>
            [EnumMember(Value = "Architecture/Engineering/Construction")]
            ArchitectureEngineeringConstruction = 24,
            /// <summary>
            /// Enum AutoTransportationManufacturing for value: Auto/Transportation/Manufacturing
            /// </summary>
            [EnumMember(Value = "Auto/Transportation/Manufacturing")]
            AutoTransportationManufacturing = 25,
            /// <summary>
            /// Enum PlatformPartner for value: Platform Partner
            /// </summary>
            [EnumMember(Value = "Platform Partner")]
            PlatformPartner = 26
        }

        /// <summary>
        /// Formats a InlineObject4 into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            serializedModel += "industryType," + IndustryType;
            return serializedModel;
        }

        /// <summary>
        /// Returns a InlineObject4 as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            var industryTypeStringValue = IndustryType.ToString();
            dictionary.Add("industryType", industryTypeStringValue);
            
            return dictionary;
        }
    }
}
