//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.Scripting;
using Unity.Services.Core.Environments.Client.Models;
using Unity.Services.Core.Environments.Client.Scheduler;


namespace Unity.Services.Core.Environments.Client.Default
{
    internal static class JsonSerialization
    {
        public static byte[] Serialize<T>(T obj)
        {
            return Encoding.UTF8.GetBytes(SerializeToString(obj));
        }

        public static string SerializeToString<T>(T obj)
        {
            return JsonConvert.SerializeObject(obj, new JsonSerializerSettings{ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore});
        }
    }

    /// <summary>
    /// DefaultApiBaseRequest class
    /// </summary>
    [Preserve]
    internal class DefaultApiBaseRequest
    {
        /// <summary>
        /// Helper function to add a provided key and value to the provided
        /// query params and to escape the values correctly if it is a URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <param name="value">The value to be added.</param>
        /// <returns>Returns a `List/<string/>` with the `key` and `value` added to the provided `queryParams`.</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, string key, string value)
        {
            key = UnityWebRequest.EscapeURL(key);
            value = UnityWebRequest.EscapeURL(value);
            queryParams.Add($"{key}={value}");

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided key and list of values to the
        /// provided query params and to escape the values correctly if it is a
        /// URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <param name="values">List of values to be added.</param>
        /// <param name="style">string for defining the style, currently unused.</param>
        /// <param name="explode">True if query params should be escaped and added separately.</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, string key, List<string> values, string style, bool explode)
        {
            if (explode)
            {
                foreach(var value in values)
                {
                    string escapedValue = UnityWebRequest.EscapeURL(value);
                    queryParams.Add($"{UnityWebRequest.EscapeURL(key)}={escapedValue}");
                }
            }
            else
            {
                string paramString = $"{UnityWebRequest.EscapeURL(key)}=";
                foreach(var value in values)
                {
                    paramString += UnityWebRequest.EscapeURL(value) + ",";
                }
                paramString = paramString.Remove(paramString.Length - 1);
                queryParams.Add(paramString);
            }

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided map of keys and values, representing a model, to the
        /// provided query params.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="modelVars">A `Dictionary` representing the vars of the model</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, Dictionary<string, string> modelVars)
        {
            foreach(var key in modelVars.Keys)
            {
                string escapedValue = UnityWebRequest.EscapeURL(modelVars[key]);
                queryParams.Add($"{UnityWebRequest.EscapeURL(key)}={escapedValue}");
            }

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided key and value to the provided
        /// query params and to escape the values correctly if it is a URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <typeparam name="T">The type of the value to be added.</typeparam>
        /// <param name="value">The value to be added.</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams<T>(List<string> queryParams, string key, T value)
        {
            if (queryParams == null)
            {
                queryParams = new List<string>();
            }

            key = UnityWebRequest.EscapeURL(key);
            string valueString = UnityWebRequest.EscapeURL(value.ToString());
            queryParams.Add($"{key}={valueString}");
            return queryParams;
        }

        /// <summary>
        /// Constructs a string representing an array path parameter.
        /// </summary>
        /// <param name="pathParam">The list of values to convert to string.</param>
        /// <returns>String representing the param.</returns>
        [Preserve]
        public string GetPathParamString(List<string> pathParam)
        {
            string paramString = "";
            foreach(var value in pathParam)
            {
                paramString += UnityWebRequest.EscapeURL(value) + ",";
            }
            paramString = paramString.Remove(paramString.Length - 1);
            return paramString;
        }

        /// <summary>
        /// Constructs the body of the request based on IO stream.
        /// </summary>
        /// <param name="stream">The IO stream to use.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(System.IO.Stream stream)
        {
            if (stream != null)
            {
                using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
                {
                    stream.CopyTo(ms);
                    return ms.ToArray();
                }
            }
            return null;
        }

        /// <summary>
        /// Construct the request body based on string value.
        /// </summary>
        /// <param name="s">The input body.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(string s)
        {
            return System.Text.Encoding.UTF8.GetBytes(s);
        }

        /// <summary>
        /// Construct request body based on generic object.
        /// </summary>
        /// <param name="o">The object to use.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(object o)
        {
            return JsonSerialization.Serialize(o);
        }

        /// <summary>
        /// Generate an accept header.
        /// </summary>
        /// <param name="accepts">list of accepts objects.</param>
        /// <returns>The generated accept header.</returns>
        public string GenerateAcceptHeader(string[] accepts)
        {
            if (accepts.Length == 0)
            {
                return null;
            }
            for (int i = 0; i < accepts.Length; ++i)
            {
                if (string.Equals(accepts[i], "application/json", System.StringComparison.OrdinalIgnoreCase))
                {
                    return "application/json";
                }
            }
            return string.Join(", ", accepts);
        }

        private static readonly Regex JsonRegex = new Regex(@"application\/json(;\s)?((charset=utf8|q=[0-1]\.\d)(\s)?)*");

        /// <summary>
        /// Generate Content Type Header.
        /// </summary>
        /// <param name="contentTypes">The content types.</param>
        /// <returns>The Content Type Header.</returns>
        public string GenerateContentTypeHeader(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
            {
                return null;
            }

            for(int i = 0; i < contentTypes.Length; ++i)
            {
                if (!string.IsNullOrWhiteSpace(contentTypes[i]) && JsonRegex.IsMatch(contentTypes[i]))
                {
                    return contentTypes[i];
                }
            }
            return contentTypes[0];
        }

        /// <summary>
        /// Generate multipart form file section.
        /// </summary>
        /// <param name="paramName">The parameter name.</param>
        /// <param name="stream">The file stream to use.</param>
        /// <param name="contentType">The content type.</param>
        /// <returns>Returns a multipart form section.</returns>
        public IMultipartFormSection GenerateMultipartFormFileSection(string paramName, System.IO.FileStream stream, string contentType)
        {
            return new MultipartFormFileSection(paramName, ConstructBody(stream), GetFileName(stream.Name), contentType);
        }

        /// <summary>
        /// Generate multipart form file section.
        /// </summary>
        /// <param name="paramName">The parameter name.</param>
        /// <param name="stream">The IO stream to use.</param>
        /// <param name="contentType">The content type.</param>
        /// <returns>Returns a multipart form section.</returns>
        public IMultipartFormSection GenerateMultipartFormFileSection(string paramName, System.IO.Stream stream, string contentType)
        {
            return new MultipartFormFileSection(paramName, ConstructBody(stream), Guid.NewGuid().ToString(), contentType);
        }

        private string GetFileName(string filePath)
        {
            return System.IO.Path.GetFileName(filePath);
        }
    }

    /// <summary>
    /// ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDeleteRequest
    /// Unarchive a project
    /// </summary>
    [Preserve]
    internal class ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDeleteRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for organizationId </summary>
        [Preserve]
        public System.Guid OrganizationId { get; }
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDelete Request Object.
        /// Unarchive a project
        /// </summary>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="projectId">Project ID</param>
        [Preserve]
        public ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchiveDeleteRequest(System.Guid organizationId, System.Guid projectId)
        {
            OrganizationId = organizationId;

            ProjectId = projectId;

            PathAndQueryParams = $"/api/unity/v1/organizations/{organizationId}/projects/{projectId}/archive";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "DELETE";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePutRequest
    /// Archive a project
    /// </summary>
    [Preserve]
    internal class ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePutRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for organizationId </summary>
        [Preserve]
        public System.Guid OrganizationId { get; }
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePut Request Object.
        /// Archive a project
        /// </summary>
        /// <param name="organizationId">Organization ID</param>
        /// <param name="projectId">Project ID</param>
        [Preserve]
        public ApiUnityV1OrganizationsOrganizationIdProjectsProjectIdArchivePutRequest(System.Guid organizationId, System.Guid projectId)
        {
            OrganizationId = organizationId;

            ProjectId = projectId;

            PathAndQueryParams = $"/api/unity/v1/organizations/{organizationId}/projects/{projectId}/archive";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "PUT";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityCreateAddressRequest
    /// Create an address for an organization
    /// </summary>
    [Preserve]
    internal class UnityCreateAddressRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for organizationId </summary>
        [Preserve]
        public System.Guid OrganizationId { get; }
        /// <summary>Accessor for inlineObject5 </summary>
        [Preserve]
        public Unity.Services.Core.Environments.Client.Models.InlineObject5 InlineObject5 { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityCreateAddress Request Object.
        /// Create an address for an organization
        /// </summary>
        /// <param name="organizationId">ID of the organization</param>
        /// <param name="inlineObject5">InlineObject5 param</param>
        [Preserve]
        public UnityCreateAddressRequest(System.Guid organizationId, Unity.Services.Core.Environments.Client.Models.InlineObject5 inlineObject5 = default(Unity.Services.Core.Environments.Client.Models.InlineObject5))
        {
            OrganizationId = organizationId;

            InlineObject5 = inlineObject5;
            PathAndQueryParams = $"/api/unity/v1/organizations/{organizationId}/addresses";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(InlineObject5 != null)
            {
                return ConstructBody(InlineObject5);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityCreateEnvironmentRequest
    /// Create an environment for the project
    /// </summary>
    [Preserve]
    internal class UnityCreateEnvironmentRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public string ProjectId { get; }
        /// <summary>Accessor for inlineObject6 </summary>
        [Preserve]
        public Unity.Services.Core.Environments.Client.Models.InlineObject6 InlineObject6 { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityCreateEnvironment Request Object.
        /// Create an environment for the project
        /// </summary>
        /// <param name="projectId">Project ID</param>
        /// <param name="inlineObject6">InlineObject6 param</param>
        [Preserve]
        public UnityCreateEnvironmentRequest(string projectId, Unity.Services.Core.Environments.Client.Models.InlineObject6 inlineObject6 = default(Unity.Services.Core.Environments.Client.Models.InlineObject6))
        {
            ProjectId = projectId;

            InlineObject6 = inlineObject6;
            PathAndQueryParams = $"/api/unity/v1/projects/{projectId}/environments";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(InlineObject6 != null)
            {
                return ConstructBody(InlineObject6);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityCreateFavoriteProjectRequest
    /// Favorite a project for a user
    /// </summary>
    [Preserve]
    internal class UnityCreateFavoriteProjectRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for userId </summary>
        [Preserve]
        public System.Guid UserId { get; }
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityCreateFavoriteProject Request Object.
        /// Favorite a project for a user
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <param name="projectId">ID of the project</param>
        [Preserve]
        public UnityCreateFavoriteProjectRequest(System.Guid userId, System.Guid projectId)
        {
            UserId = userId;

            ProjectId = projectId;

            PathAndQueryParams = $"/api/unity/v1/users/{userId}/favorite-projects/{projectId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityCreateOrganizationRequest
    /// Create a new organization
    /// </summary>
    [Preserve]
    internal class UnityCreateOrganizationRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for inlineObject3 </summary>
        [Preserve]
        public Unity.Services.Core.Environments.Client.Models.InlineObject3 InlineObject3 { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityCreateOrganization Request Object.
        /// Create a new organization
        /// </summary>
        /// <param name="inlineObject3">InlineObject3 param</param>
        [Preserve]
        public UnityCreateOrganizationRequest(Unity.Services.Core.Environments.Client.Models.InlineObject3 inlineObject3 = default(Unity.Services.Core.Environments.Client.Models.InlineObject3))
        {
            InlineObject3 = inlineObject3;
            PathAndQueryParams = $"/api/unity/v1/organizations";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(InlineObject3 != null)
            {
                return ConstructBody(InlineObject3);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityCreateProjectRequest
    /// Create a new project
    /// </summary>
    [Preserve]
    internal class UnityCreateProjectRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for organizationId </summary>
        [Preserve]
        public System.Guid OrganizationId { get; }
        /// <summary>Accessor for inlineObject </summary>
        [Preserve]
        public Unity.Services.Core.Environments.Client.Models.InlineObject InlineObject { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityCreateProject Request Object.
        /// Create a new project
        /// </summary>
        /// <param name="organizationId">ID of the organization</param>
        /// <param name="inlineObject">InlineObject param</param>
        [Preserve]
        public UnityCreateProjectRequest(System.Guid organizationId, Unity.Services.Core.Environments.Client.Models.InlineObject inlineObject = default(Unity.Services.Core.Environments.Client.Models.InlineObject))
        {
            OrganizationId = organizationId;

            InlineObject = inlineObject;
            PathAndQueryParams = $"/api/unity/v1/organizations/{organizationId}/projects";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(InlineObject != null)
            {
                return ConstructBody(InlineObject);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityDeleteEnvironmentRequest
    /// Delete an environment of a project
    /// </summary>
    [Preserve]
    internal class UnityDeleteEnvironmentRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public string ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public string EnvironmentId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityDeleteEnvironment Request Object.
        /// Delete an environment of a project
        /// </summary>
        /// <param name="projectId">Project ID</param>
        /// <param name="environmentId">Environment ID</param>
        [Preserve]
        public UnityDeleteEnvironmentRequest(string projectId, string environmentId)
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            PathAndQueryParams = $"/api/unity/v1/projects/{projectId}/environments/{environmentId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "DELETE";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityDeleteFavoriteProjectRequest
    /// Unfavorite a project for a user
    /// </summary>
    [Preserve]
    internal class UnityDeleteFavoriteProjectRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for userId </summary>
        [Preserve]
        public System.Guid UserId { get; }
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityDeleteFavoriteProject Request Object.
        /// Unfavorite a project for a user
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <param name="projectId">ID of the project</param>
        [Preserve]
        public UnityDeleteFavoriteProjectRequest(System.Guid userId, System.Guid projectId)
        {
            UserId = userId;

            ProjectId = projectId;

            PathAndQueryParams = $"/api/unity/v1/users/{userId}/favorite-projects/{projectId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "DELETE";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityGetEnvironmentRequest
    /// Get an environment of a project
    /// </summary>
    [Preserve]
    internal class UnityGetEnvironmentRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public string ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public string EnvironmentId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityGetEnvironment Request Object.
        /// Get an environment of a project
        /// </summary>
        /// <param name="projectId">Project ID</param>
        /// <param name="environmentId">Environment ID</param>
        [Preserve]
        public UnityGetEnvironmentRequest(string projectId, string environmentId)
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            PathAndQueryParams = $"/api/unity/v1/projects/{projectId}/environments/{environmentId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityGetEnvironmentsRequest
    /// List environments for a project
    /// </summary>
    [Preserve]
    internal class UnityGetEnvironmentsRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public string ProjectId { get; }
        /// <summary>Accessor for archived </summary>
        [Preserve]
        public bool? Archived { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityGetEnvironments Request Object.
        /// List environments for a project
        /// </summary>
        /// <param name="projectId">Project ID</param>
        /// <param name="archived">If set to true, the API returns the archived environments</param>
        [Preserve]
        public UnityGetEnvironmentsRequest(string projectId, bool? archived = default(bool?))
        {
            ProjectId = projectId;

            Archived = archived;
            PathAndQueryParams = $"/api/unity/v1/projects/{projectId}/environments";

            List<string> queryParams = new List<string>();

            var archivedStringValue = Archived.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "archived", archivedStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityGetOrganizationRequest
    /// Get an organization
    /// </summary>
    [Preserve]
    internal class UnityGetOrganizationRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for organizationId </summary>
        [Preserve]
        public System.Guid OrganizationId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityGetOrganization Request Object.
        /// Get an organization
        /// </summary>
        /// <param name="organizationId">ID of the organization</param>
        [Preserve]
        public UnityGetOrganizationRequest(System.Guid organizationId)
        {
            OrganizationId = organizationId;

            PathAndQueryParams = $"/api/unity/v1/organizations/{organizationId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityGetOrganizationMembersRequest
    /// List members belonging to an organization
    /// </summary>
    [Preserve]
    internal class UnityGetOrganizationMembersRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for organizationId </summary>
        [Preserve]
        public System.Guid OrganizationId { get; }
        /// <summary>Accessor for limit </summary>
        [Preserve]
        public int? Limit { get; }
        /// <summary>Accessor for offset </summary>
        [Preserve]
        public int? Offset { get; }
        /// <summary>Accessor for sort </summary>
        [Preserve]
        public string Sort { get; }
        /// <summary>Accessor for order </summary>
        [Preserve]
        public string Order { get; }
        /// <summary>Accessor for search </summary>
        [Preserve]
        public string Search { get; }
        /// <summary>Accessor for roles </summary>
        [Preserve]
        public List<string> Roles { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityGetOrganizationMembers Request Object.
        /// List members belonging to an organization
        /// </summary>
        /// <param name="organizationId">ID of the organization</param>
        /// <param name="limit">Maximum number of items to return, by default returns 10 members per page</param>
        /// <param name="offset">Number of items to skip</param>
        /// <param name="sort">Value by which the results will be sorted, allowed values are {userName, role}</param>
        /// <param name="order">Order for the sorting, either ASC or DESC, default is ASC</param>
        /// <param name="search">Value used for filtering members based on their user name</param>
        /// <param name="roles">Array of member roles that the result set will contain, the values have to be a subset of {guest,user,manager,owner}</param>
        [Preserve]
        public UnityGetOrganizationMembersRequest(System.Guid organizationId, int? limit = default(int?), int? offset = default(int?), string sort = default(string), string order = default(string), string search = default(string), List<string> roles = default(List<string>))
        {
            OrganizationId = organizationId;

            Limit = limit;
            Offset = offset;
            Sort = sort;
            Order = order;
            Search = search;
            Roles = roles;
            PathAndQueryParams = $"/api/unity/v1/organizations/{organizationId}/members";

            List<string> queryParams = new List<string>();

            var limitStringValue = Limit.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "limit", limitStringValue);
            var offsetStringValue = Offset.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "offset", offsetStringValue);
            if(!string.IsNullOrEmpty(Sort))
            {
                queryParams = AddParamsToQueryParams(queryParams, "sort", Sort);
            }
            if(!string.IsNullOrEmpty(Order))
            {
                queryParams = AddParamsToQueryParams(queryParams, "order", Order);
            }
            if(!string.IsNullOrEmpty(Search))
            {
                queryParams = AddParamsToQueryParams(queryParams, "search", Search);
            }
            if(Roles != null)
            {
                var rolesStringValues = Roles.Select(v => v.ToString()).ToList();
                queryParams = AddParamsToQueryParams(queryParams, "roles", rolesStringValues, "form", true);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityGetProjectMembersRequest
    /// List members belonging to a project with direct link
    /// </summary>
    [Preserve]
    internal class UnityGetProjectMembersRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for limit </summary>
        [Preserve]
        public int? Limit { get; }
        /// <summary>Accessor for offset </summary>
        [Preserve]
        public int? Offset { get; }
        /// <summary>Accessor for roles </summary>
        [Preserve]
        public List<string> Roles { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityGetProjectMembers Request Object.
        /// List members belonging to a project with direct link
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="limit">Maximum number of items to return, by default returns 10 members per page</param>
        /// <param name="offset">Number of items to skip</param>
        /// <param name="roles">Array of member roles that the result set will contain, the values have to be a subset of {user,manager,owner,none}</param>
        [Preserve]
        public UnityGetProjectMembersRequest(System.Guid projectId, int? limit = default(int?), int? offset = default(int?), List<string> roles = default(List<string>))
        {
            ProjectId = projectId;

            Limit = limit;
            Offset = offset;
            Roles = roles;
            PathAndQueryParams = $"/api/unity/v1/projects/{projectId}/members";

            List<string> queryParams = new List<string>();

            var limitStringValue = Limit.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "limit", limitStringValue);
            var offsetStringValue = Offset.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "offset", offsetStringValue);
            if(Roles != null)
            {
                var rolesStringValues = Roles.Select(v => v.ToString()).ToList();
                queryParams = AddParamsToQueryParams(queryParams, "roles", rolesStringValues, "form", true);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityGetProjectV1Request
    /// Get a project (v1)
    /// </summary>
    [Preserve]
    internal class UnityGetProjectV1Request : DefaultApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityGetProjectV1 Request Object.
        /// Get a project (v1)
        /// </summary>
        /// <param name="projectId">Project ID</param>
        [Preserve]
        public UnityGetProjectV1Request(System.Guid projectId)
        {
            ProjectId = projectId;

            PathAndQueryParams = $"/api/unity/v1/projects/{projectId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityGetUserGuestProjectsRequest
    /// Get a list of user&#39;s guest projects
    /// </summary>
    [Preserve]
    internal class UnityGetUserGuestProjectsRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for userId </summary>
        [Preserve]
        public System.Guid UserId { get; }
        /// <summary>Accessor for search </summary>
        [Preserve]
        public string Search { get; }
        /// <summary>Accessor for sort </summary>
        [Preserve]
        public string Sort { get; }
        /// <summary>Accessor for order </summary>
        [Preserve]
        public string Order { get; }
        /// <summary>Accessor for limit </summary>
        [Preserve]
        public int? Limit { get; }
        /// <summary>Accessor for offset </summary>
        [Preserve]
        public int? Offset { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityGetUserGuestProjects Request Object.
        /// Get a list of user&#39;s guest projects
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <param name="search">If set, the API returns the guest projects matching the query by the project name</param>
        /// <param name="sort">It sorts the projects, by default sorts by name</param>
        /// <param name="order">It orders the sorted projects, by default orders in ascending order</param>
        /// <param name="limit">Maximum number of items to return, by default returns 10 projects per page</param>
        /// <param name="offset">Number of items to skip</param>
        [Preserve]
        public UnityGetUserGuestProjectsRequest(System.Guid userId, string search = default(string), string sort = default(string), string order = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            UserId = userId;

            Search = search;
            Sort = sort;
            Order = order;
            Limit = limit;
            Offset = offset;
            PathAndQueryParams = $"/api/unity/v1/users/{userId}/guest-projects";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Search))
            {
                queryParams = AddParamsToQueryParams(queryParams, "search", Search);
            }
            if(!string.IsNullOrEmpty(Sort))
            {
                queryParams = AddParamsToQueryParams(queryParams, "sort", Sort);
            }
            if(!string.IsNullOrEmpty(Order))
            {
                queryParams = AddParamsToQueryParams(queryParams, "order", Order);
            }
            var limitStringValue = Limit.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "limit", limitStringValue);
            var offsetStringValue = Offset.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "offset", offsetStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityGetUserOrganizationsRequest
    /// Get user with a list of user&#39;s organizations
    /// </summary>
    [Preserve]
    internal class UnityGetUserOrganizationsRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for userId </summary>
        [Preserve]
        public System.Guid UserId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityGetUserOrganizations Request Object.
        /// Get user with a list of user&#39;s organizations
        /// </summary>
        /// <param name="userId">ID of the user</param>
        [Preserve]
        public UnityGetUserOrganizationsRequest(System.Guid userId)
        {
            UserId = userId;

            PathAndQueryParams = $"/api/unity/v1/users/{userId}/organizations";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityGetUserPermissionsRequest
    /// Lists permissions of the user for a resource
    /// </summary>
    [Preserve]
    internal class UnityGetUserPermissionsRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for userId </summary>
        [Preserve]
        public System.Guid UserId { get; }
        /// <summary>Accessor for resourceType </summary>
        [Preserve]
        public string ResourceType { get; }
        /// <summary>Accessor for resourceId </summary>
        [Preserve]
        public System.Guid ResourceId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityGetUserPermissions Request Object.
        /// Lists permissions of the user for a resource
        /// </summary>
        /// <param name="userId">UUID of the user. \"me\" is also acceptable.</param>
        /// <param name="resourceType">The type of the resource for which the permissions will be returned.</param>
        /// <param name="resourceId">The UUID of the resource for which the permissions will be returned. \"me\" is also allowed as resourceId when resourceType is \"user\"</param>
        [Preserve]
        public UnityGetUserPermissionsRequest(System.Guid userId, string resourceType, System.Guid resourceId)
        {
            UserId = userId;

            ResourceType = resourceType;
            ResourceId = resourceId;
            PathAndQueryParams = $"/api/unity/v1/users/{userId}/permissions";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(ResourceType))
            {
                queryParams = AddParamsToQueryParams(queryParams, "resourceType", ResourceType);
            }
            if(ResourceId != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "resourceId", ResourceId);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityListFavoriteProjectsRequest
    /// List favorite projects for a user
    /// </summary>
    [Preserve]
    internal class UnityListFavoriteProjectsRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for userId </summary>
        [Preserve]
        public int UserId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityListFavoriteProjects Request Object.
        /// List favorite projects for a user
        /// </summary>
        /// <param name="userId">ID of the user</param>
        [Preserve]
        public UnityListFavoriteProjectsRequest(int userId)
        {
            UserId = userId;

            PathAndQueryParams = $"/api/unity/v1/users/{userId}/favorite-projects";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityListOrganizationFavoriteProjectsRequest
    /// List favorite projects for a user in an organization
    /// </summary>
    [Preserve]
    internal class UnityListOrganizationFavoriteProjectsRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for userId </summary>
        [Preserve]
        public System.Guid UserId { get; }
        /// <summary>Accessor for organizationId </summary>
        [Preserve]
        public System.Guid OrganizationId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityListOrganizationFavoriteProjects Request Object.
        /// List favorite projects for a user in an organization
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <param name="organizationId">ID of the organization</param>
        [Preserve]
        public UnityListOrganizationFavoriteProjectsRequest(System.Guid userId, System.Guid organizationId)
        {
            UserId = userId;

            OrganizationId = organizationId;

            PathAndQueryParams = $"/api/unity/v1/users/{userId}/organizations/{organizationId}/favorite-projects";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityListProjectsRequest
    /// List projects for an organization
    /// </summary>
    [Preserve]
    internal class UnityListProjectsRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for organizationId </summary>
        [Preserve]
        public System.Guid OrganizationId { get; }
        /// <summary>Accessor for archived </summary>
        [Preserve]
        public bool? Archived { get; }
        /// <summary>Accessor for search </summary>
        [Preserve]
        public string Search { get; }
        /// <summary>Accessor for sort </summary>
        [Preserve]
        public string Sort { get; }
        /// <summary>Accessor for order </summary>
        [Preserve]
        public string Order { get; }
        /// <summary>Accessor for limit </summary>
        [Preserve]
        public int? Limit { get; }
        /// <summary>Accessor for offset </summary>
        [Preserve]
        public int? Offset { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityListProjects Request Object.
        /// List projects for an organization
        /// </summary>
        /// <param name="organizationId">ID of the organization</param>
        /// <param name="archived">If set to true, the API returns the archived projects</param>
        /// <param name="search">If set, the API returns the projects matching the query by the project name</param>
        /// <param name="sort">It sorts the projects, by default sorts by name</param>
        /// <param name="order">It orders the sorted projects, by default orders in ascending order</param>
        /// <param name="limit">Maximum number of items to return, by default returns 10 projects per page</param>
        /// <param name="offset">Number of items to skip</param>
        [Preserve]
        public UnityListProjectsRequest(System.Guid organizationId, bool? archived = default(bool?), string search = default(string), string sort = default(string), string order = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            OrganizationId = organizationId;

            Archived = archived;
            Search = search;
            Sort = sort;
            Order = order;
            Limit = limit;
            Offset = offset;
            PathAndQueryParams = $"/api/unity/v1/organizations/{organizationId}/projects";

            List<string> queryParams = new List<string>();

            var archivedStringValue = Archived.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "archived", archivedStringValue);
            if(!string.IsNullOrEmpty(Search))
            {
                queryParams = AddParamsToQueryParams(queryParams, "search", Search);
            }
            if(!string.IsNullOrEmpty(Sort))
            {
                queryParams = AddParamsToQueryParams(queryParams, "sort", Sort);
            }
            if(!string.IsNullOrEmpty(Order))
            {
                queryParams = AddParamsToQueryParams(queryParams, "order", Order);
            }
            var limitStringValue = Limit.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "limit", limitStringValue);
            var offsetStringValue = Offset.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "offset", offsetStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityPatchProjectV1Request
    /// Update a project (v1)
    /// </summary>
    [Preserve]
    internal class UnityPatchProjectV1Request : DefaultApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for inlineObject1 </summary>
        [Preserve]
        public Unity.Services.Core.Environments.Client.Models.InlineObject1 InlineObject1 { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityPatchProjectV1 Request Object.
        /// Update a project (v1)
        /// </summary>
        /// <param name="projectId">Project ID</param>
        /// <param name="inlineObject1">InlineObject1 param</param>
        [Preserve]
        public UnityPatchProjectV1Request(System.Guid projectId, Unity.Services.Core.Environments.Client.Models.InlineObject1 inlineObject1 = default(Unity.Services.Core.Environments.Client.Models.InlineObject1))
        {
            ProjectId = projectId;

            InlineObject1 = inlineObject1;
            PathAndQueryParams = $"/api/unity/v1/projects/{projectId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(InlineObject1 != null)
            {
                return ConstructBody(InlineObject1);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "PATCH";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityTransferProjectRequest
    /// Transfer a project
    /// </summary>
    [Preserve]
    internal class UnityTransferProjectRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for organizationId </summary>
        [Preserve]
        public System.Guid OrganizationId { get; }
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for inlineObject2 </summary>
        [Preserve]
        public Unity.Services.Core.Environments.Client.Models.InlineObject2 InlineObject2 { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityTransferProject Request Object.
        /// Transfer a project
        /// </summary>
        /// <param name="organizationId">ID of the organization</param>
        /// <param name="projectId">ID of the project</param>
        /// <param name="inlineObject2">InlineObject2 param</param>
        [Preserve]
        public UnityTransferProjectRequest(System.Guid organizationId, System.Guid projectId, Unity.Services.Core.Environments.Client.Models.InlineObject2 inlineObject2 = default(Unity.Services.Core.Environments.Client.Models.InlineObject2))
        {
            OrganizationId = organizationId;

            ProjectId = projectId;

            InlineObject2 = inlineObject2;
            PathAndQueryParams = $"/api/unity/v1/organizations/{organizationId}/projects/{projectId}/transfer";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(InlineObject2 != null)
            {
                return ConstructBody(InlineObject2);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityUpdateOrganizationRequest
    /// Update an organization
    /// </summary>
    [Preserve]
    internal class UnityUpdateOrganizationRequest : DefaultApiBaseRequest
    {
        /// <summary>Accessor for organizationId </summary>
        [Preserve]
        public System.Guid OrganizationId { get; }
        /// <summary>Accessor for inlineObject4 </summary>
        [Preserve]
        public Unity.Services.Core.Environments.Client.Models.InlineObject4 InlineObject4 { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityUpdateOrganization Request Object.
        /// Update an organization
        /// </summary>
        /// <param name="organizationId">ID of the organization</param>
        /// <param name="inlineObject4">InlineObject4 param</param>
        [Preserve]
        public UnityUpdateOrganizationRequest(System.Guid organizationId, Unity.Services.Core.Environments.Client.Models.InlineObject4 inlineObject4 = default(Unity.Services.Core.Environments.Client.Models.InlineObject4))
        {
            OrganizationId = organizationId;

            InlineObject4 = inlineObject4;
            PathAndQueryParams = $"/api/unity/v1/organizations/{organizationId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(InlineObject4 != null)
            {
                return ConstructBody(InlineObject4);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "PUT";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UnityUploadIconV1Request
    /// Upload an icon (v1)
    /// </summary>
    [Preserve]
    internal class UnityUploadIconV1Request : DefaultApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public string ProjectId { get; }
        /// <summary>Accessor for file </summary>
        [Preserve]
        public System.IO.Stream File { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UnityUploadIconV1 Request Object.
        /// Upload an icon (v1)
        /// </summary>
        /// <param name="projectId">Project ID</param>
        /// <param name="file">The file to upload as a reference</param>
        [Preserve]
        public UnityUploadIconV1Request(string projectId, System.IO.Stream file = default(System.IO.Stream))
        {
            ProjectId = projectId;

            File = file;
            PathAndQueryParams = $"/api/unity/v1/projects/{projectId}/icon-upload";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public List<IMultipartFormSection> ConstructBody()
        {
            List<IMultipartFormSection> requestParts = new List<IMultipartFormSection>();
            requestParts.Add(GenerateMultipartFormFileSection("file", File, "application/octet-stream"));
            
            return requestParts;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");


            string[] accepts = {
                "application/json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
}
